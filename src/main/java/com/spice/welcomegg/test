package com.example.examplemod;

import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.client.event.ClientChatReceivedEvent;
import net.neoforged.neoforge.common.NeoForge;
import org.slf4j.Logger;

import com.mojang.logging.LogUtils;

import net.minecraft.client.Minecraft;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.chat.Component;
import net.minecraft.world.level.block.Blocks;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.event.lifecycle.FMLClientSetupEvent;
import net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent;
import net.neoforged.neoforge.event.server.ServerStartingEvent;


import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

// The value here should match an entry in the META-INF/neoforge.mods.toml file
@Mod(ServerMessageResponder.MODID)
public class ServerMessageResponder {

    private static final Random RANDOM = new Random();
    // Define mod id in a common place for everything to reference
    public static final String MODID = "welcomer";
    // Directly reference a slf4j logger
    private static final Logger LOGGER = LogUtils.getLogger();

    /*public ServerMessageResponder(IEventBus modBus) {
    /*public ServerMessageResponder(IEventBus modBus) {
        // Register this instance to the Forge event bus
        NeoForge.EVENT_BUS.register(ClientModEvents.class);
    }*/

    private void commonSetup(final FMLCommonSetupEvent event) {
        // Some common setup code
        LOGGER.info("HELLO FROM COMMON SETUP");

        if (Config.logDirtBlock)
            LOGGER.info("DIRT BLOCK >> {}", BuiltInRegistries.BLOCK.getKey(Blocks.DIRT));

        LOGGER.info(Config.magicNumberIntroduction + Config.magicNumber);

        Config.items.forEach((item) -> LOGGER.info("ITEM >> {}", item.toString()));
    }

    /*@SubscribeEvent
    public void onServerStarting(ServerStartingEvent event) {
        // Do something when the server starts
        LOGGER.info("HELLO from server starting");
    }*/

    @EventBusSubscriber(modid = MODID, bus = EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
    public static class ClientModEvents {
        @SubscribeEvent
        public static void onClientSetup(FMLClientSetupEvent event) {
            // Some client setup code
            LOGGER.info("HELLO FROM CLIENT SETUP");
            LOGGER.info("MINECRAFT NAME >> {}", Minecraft.getInstance().getUser().getName());
        }
    }

    public static class ChatEventHandler {
        @SubscribeEvent
        public void onChatMessage(ClientChatReceivedEvent event) {
            // Ensure it's a system/server message
            if (event.isSystem()) {
                String message = event.getMessage().getString().toLowerCase();

                // Check if the message contains "welcome" or "gg"
                if (message.contains("welcome")) {
                    scheduleResponse(ChatEventHandler::sendWelcomeMessage);
                } else if (message.contains("gg")) {
                    scheduleResponse(ChatEventHandler::sendGGMessage);
                }
            }
        }

        private void scheduleResponse(Runnable response) {
            // Schedule the response with a delay of 1-3 seconds
            int delay = 1 + RANDOM.nextInt(3); // 1 to 3 seconds
            Executors.newSingleThreadScheduledExecutor()
                    .schedule(response, delay, TimeUnit.SECONDS);
        }

        private static void sendWelcomeMessage() {
            boolean capitalize = RANDOM.nextBoolean();
            boolean addExclamation = RANDOM.nextBoolean();

            String message = "welcome";
            if (capitalize) {
                message = message.substring(0, 1).toUpperCase() + message.substring(1);
            }
            if (addExclamation) {
                message += "!";
            }

            sendMessage(message);
        }

        private static void sendGGMessage() {
            String[] variations = {"GG", "Gg", "gg"};
            String message = variations[RANDOM.nextInt(variations.length)];

            if (RANDOM.nextBoolean()) { // 50% chance to add exclamation
                message += "!";
            }

            sendMessage(message);
        }

        private static void sendMessage(String message) {
            assert Minecraft.getInstance().player != null;
            Minecraft.getInstance().player.sendSystemMessage(Component.nullToEmpty(message));
        }
    }
}
